root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs# mkdir express-demo
root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs# cd express-demo/
root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs/express-demo# chmod -R 777 .
root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs/express-demo# 
root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs/express-demo# npm init --yes
Wrote to /opt/lampp/htdocs/nodejs/express-demo/package.json:

{
  "name": "express-demo",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

//*******
//install express js
root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs/express-demo# npm i express --save
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN express-demo@1.0.0 No description
npm WARN express-demo@1.0.0 No repository field.

+ express@4.16.3
added 50 packages from 47 contributors and audited 119 packages in 2.16s
found 0 vulnerabilities
//*******
// create index.js

// load express.js
const express = require('express');
// associe un variable a express librarie 
const app = express();


// cree un serveur
// si un port configure en en .env le serveur prend le env Port si non prend 3000
const PORT = process.env.PORT  || 3000;
app.listen(PORT, () => { console.log(`app runing on ${ PORT } port`); });

//******************
root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs/express-demo# npm i -g nodemon
/usr/local/bin/nodemon -> /usr/local/lib/node_modules/nodemon/bin/nodemon.js

> nodemon@1.18.4 postinstall /usr/local/lib/node_modules/nodemon
> node bin/postinstall || exit 0

Love nodemon? You can now support the project via the open collective:
 > https://opencollective.com/nodemon/donate

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules/nodemon/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ nodemon@1.18.4
added 233 packages from 136 contributors in 9.164s
//**********
cree un variable d environement
#win
set PORT=4000
#Linux or Mac
export PORT=4000
root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs/express-demo# export PORT=4000
root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs/express-demo# nodemon index
[nodemon] 1.18.4
[nodemon] to restart at any time, enter `rs`
[nodemon] watching: *.*
[nodemon] starting `node index index.js`
app runing on 4000 port
//*****************
// cree un API Restfull 

// load express.js
const express = require('express');
// associe un variable a express librarie 
const app = express();

//definir le variable courses 
courses = ['Laravel', 'Angular', 'NodeJs', 'VueJs'];

// cree API 
app.get('/api/courses', (req, res) => {
    // envoyer la reponse ce genre un tableau []
    res.send(courses)
});

// cree un serveur
// si un port configure en en .env le serveur prend le env Port si non prend 3000
const PORT = process.env.PORT  || 3000;
app.listen(PORT, () => { console.log(`app runing on ${ PORT } port`); });


http://localhost:4000/api/courses

//****************
//Web|NodeJs|With ExpressJs and MongoDB
//https://www.mongodb.com/download-center/v2/community
//serve 

Step 1: Add MongoDB Package repository to Ubuntu

In order to get the latest version of MongoDB, you must add its repository to Ubuntu.. to do that, run the commands below to add the official repository key.

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5

After adding the repository key to Ubuntu, run the commands below to add MongoDB repository to your system…

echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list
Step 2: Install MongoDB on Ubuntu 18.04

Now that the repository and key have been added to Ubuntu, run the commands below to install the package.

sudo apt update
sudo apt install -y mongodb-org

Step 3: Manage MongoDB

After installing MongoDB, the commands below can be used to stop, start and enable MongoDB to automatically startup when the systems boots up.

sudo systemctl stop mongod.service
sudo systemctl start mongod.service
sudo systemctl enable mongod.service

By default, MongoDB listens on port 27017.. after installing, the local server should be able to communicate with MongoDB.. to verify whether MongoDB is running and active, run the commands below:

sudo systemctl status mongod

You should see something like the lines below:

richard@ubuntu1604:~$ sudo systemctl status mongod
● mongod.service - High-performance, schema-free document-oriented database
   Loaded: loaded (/lib/systemd/system/mongod.service; enabled; vendor preset: enabled)
   Active: active (running) since Sat 2018-01-27 08:53:42 CST; 13min ago
     Docs: https://docs.mongodb.org/manual
 Main PID: 2383 (mongod)
    Tasks: 23
   Memory: 60.7M
      CPU: 2.613s
   CGroup: /system.slice/mongod.service
           └─2383 /usr/bin/mongod --config /etc/mongod.conf

Jan 27 08:53:42 ubuntu1604 systemd[1]: Started High-performance, schema-free document-oriented database.
Jan 27 09:05:49 ubuntu1604 systemd[1]: Started High-performance, schema-free document-oriented database.

To connect to MongoDB shell, run the commands below:

mongo --host 127.0.0.1:27017

You should see something like the lines below:

MongoDB shell version v3.6.2
connecting to: mongodb://127.0.0.1:27017/
MongoDB server version: 3.6.2
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
        http://docs.mongodb.org/
Questions? Try the support group
        http://groups.google.com/group/mongodb-user
Server has startup warnings:

Step 4: Adding Admin User

If you want to enable authentication, run the commands to create a new admin user after you’ve logged into MongoDB server.

> use admin

Then run the commands below to create a new admin user

> db.createUser({user:"admin", pwd:"new_password_here", roles:[{role:"root", db:"admin"}]})
> db.createUser({user:"admin", pwd:"admin", roles:[{role:"root", db:"admin"}]})

You should see a successful admin user created

Successfully added user: {
	"user" : "admin",
	"roles" : [
		{
			"role" : "root",
			"db" : "admin"
		}
	]
}

Exit and continue below to enable MongoDB logon authentication… Run the commands below to open MongoDB config file..

sudo nano /lib/systemd/system/mongod.service

Then change the highlighted line to look like the one below and save…

[Unit]
Description=High-performance, schema-free document-oriented database
After=network.target
Documentation=https://docs.mongodb.org/manual

[Service]
User=mongodb
Group=mongodb
ExecStart=/usr/bin/mongod --auth --config /etc/mongod.conf
PIDFile=/var/run/mongodb/mongod.pid
# file size

Save and exit

Restart MongDB to make the changes apply.

sudo systemctl daemon-reload
sudo service mongod restart

Now only authetication users will be allowed to access the database server…

mongo -u admin -p new_password_here --authenticationDatabase admin
mongo -u admin -p admin --authenticationDatabase admin
Step 5: Completely Remove MongoDB

To completely remove MongoDB from a system, you must remove the MongoDB applications themselves, the configuration files, and any directories containing data and logs.

Stop the database server

sudo systemctl stop mongod.service

Remove all packages

sudo apt purge mongodb-org*

Finally, remove MongoDB databases and log files.

sudo rm -r /var/log/mongodb
sudo rm -r /var/lib/mongodb

// Instaltion Compass client server

sudo dpkg -i mongodb-compass_1.15.4_amd64.deb
root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs/express-demo/compass# sudo dpkg -i mongodb-compass_1.15.4_amd64.deb

 Once MongoDB Compass is installed, you can open it from lubuntu start menu > Accessories > MongoDB Compass.

 //*************

 sudo mkdir -p /data/db

//*************
 cree un intermidiare entre le node js et mongodb
 s appel: "mongoose"


root@superesa-System-Product-Name:/opt/lampp/htdocs/nodejs/express-demo# npm i mongoose --save

// load express.js
const express = require('express');
//
const mongoose = require('mongoose');
// associe un variable a express librarie 
const app = express();

mongoose.connect('mongodb://127.0.0.1/school')
        .then(() => {
            console.log('mongodb is connected...');
        })
        .catch((err) => {
            console.log(err.message);
        })    

//definir le variable courses 
courses = ['Laravel', 'Angular', 'NodeJs', 'VueJs'];

// cree API 
app.get('/api/courses', (req, res) => {
    // envoyer la reponse ce genre un tableau []
    res.send(courses)
});

// cree un serveur
// si un port configure en en .env le serveur prend le env Port si non prend 3000
const PORT = process.env.PORT  || 3000;
app.listen(PORT, () => { console.log(`app runing on ${ PORT } port`); });




//***********
// creation schema sur manongo db

// load express.js
const express = require('express');
//
const mongoose = require('mongoose');
// associe un variable a express librarie 
const app = express();

mongoose.connect('mongodb://127.0.0.1/school')
        .then(() => {
            console.log('mongodb is connected...');
        })
        .catch((err) => {
            console.log(err.message);
        })    



// creation de schema
const courseSchema = mongoose.Schema({
    name: String,
    author: String,
    price: Number
});

// creation de model
const Course = mongoose.model('Course', courseSchema);


// Middlware pour que le restapi peuve lire les donnes json 
app.use(express.json())



//definir le variable courses 
courses = ['Laravel', 'Angular', 'NodeJs', 'VueJs'];

// cree API 
app.get('/api/courses', (req, res) => {
    // envoyer la reponse ce genre un tableau []
    res.send(courses)
});


app.post('/api/course', async (req, res) => {
    // donner les informations au model
    const course = new Course({
        name: req.body.name,
        author: req.body.author,
        price: req.body.price
    });
    // persister ce objet dans la base de donne
    const newCourse = await course.save();

    res.send(newCourse)
   
});

// cree un serveur
// si un port configure en en .env le serveur prend le env Port si non prend 3000
const PORT = process.env.PORT  || 3000;
app.listen(PORT, () => { console.log(`app runing on ${ PORT } port`); });

//******************************************
NODEJS MONGODB DARIJA | UPDATE 


// load express.js
const express = require('express');
//
const mongoose = require('mongoose');
// associe un variable a express librarie 
const app = express();

mongoose.connect('mongodb://127.0.0.1/school')
        .then(() => {
            console.log('mongodb is connected...');
        })
        .catch((err) => {
            console.log(err.message);
        })    



// creation de schema
const courseSchema = mongoose.Schema({
    name: String,
    author: String,
    price: Number
});

// creation de model
const Course = mongoose.model('Course', courseSchema);


// Middlware pour que le restapi peuve lire les donnes json 
app.use(express.json())



//definir le variable courses 
courses = ['Laravel', 'Angular', 'NodeJs', 'VueJs'];

// cree API 
app.get('/api/courses', async (req, res) => {

    const courses = await Course.find();

    // envoyer la reponse ce genre un tableau []
    res.send(courses)
});


app.put('/api/courses/:id', async (req, res) => {

    // on recuper le id
    const id = req.params.id;

    // on recuper les donne dans la base de donne
    const course = await Course.findById(id);

    // om mes les modefication des donnes
    course.name = req.body.name,
    course.author = req.body.author,
    course.price = req.body.price

    // la persistance
    const courso = await course.save();

     // envoyer la reponse ce genre un tableau []
     res.send(courso)

});



app.post('/api/course', async (req, res) => {
    // donner les informations au model
    const course = new Course({
        name: req.body.name,
        author: req.body.author,
        price: req.body.price
    });
    // persister ce objet dans la base de donne
    const newCourse = await course.save();

    res.send(newCourse)
   
});

// cree un serveur
// si un port configure en en .env le serveur prend le env Port si non prend 3000
const PORT = process.env.PORT  || 3000;
app.listen(PORT, () => { console.log(`app runing on ${ PORT } port`); });

//**********************
NODEJS MONGODB | DELETE DATA


// load express.js
const express = require('express');
//
const mongoose = require('mongoose');
// associe un variable a express librarie 
const app = express();

mongoose.connect('mongodb://127.0.0.1/school')
        .then(() => {
            console.log('mongodb is connected...');
        })
        .catch((err) => {
            console.log(err.message);
        })    



// creation de schema
const courseSchema = mongoose.Schema({
    name: String,
    author: String,
    price: Number
});

// creation de model
const Course = mongoose.model('Course', courseSchema);


// Middlware pour que le restapi peuve lire les donnes json 
app.use(express.json())



//definir le variable courses 
courses = ['Laravel', 'Angular', 'NodeJs', 'VueJs'];

// cree API 
app.get('/api/courses', async (req, res) => {

    const courses = await Course.find();

    // envoyer la reponse ce genre un tableau []
    res.send(courses)
});


app.put('/api/courses/:id', async (req, res) => {

    // on recuper le id
    const id = req.params.id;

    // on recuper les donne dans la base de donne
    const course = await Course.findById(id);

    // om mes les modefication des donnes
    course.name = req.body.name,
    course.author = req.body.author,
    course.price = req.body.price

    // la persistance
    const courso = await course.save();

     // envoyer la reponse ce genre un tableau []
     res.send(courso)

});


app.delete('/api/courses/:idCourse', async (req, res) => {

    // on recuper le id
    const id = req.params.idCourse;

    // on recuper la donne dans la base de donne
    const course = await Course.findOne({_id: id});



    // la persistance
    const result = await course.delete();

     // envoyer reponse ce genre un tableau []
     res.send(result)

});



app.post('/api/course', async (req, res) => {
    // donner les informations au model
    const course = new Course({
        name: req.body.name,
        author: req.body.author,
        price: req.body.price
    });
    // persister ce objet dans la base de donne
    const newCourse = await course.save();

    res.send(newCourse)
   
});

// cree un serveur
// si un port configure en en .env le serveur prend le env Port si non prend 3000
const PORT = process.env.PORT  || 3000;
app.listen(PORT, () => { console.log(`app runing on ${ PORT } port`); });
